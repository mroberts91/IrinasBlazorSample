@page "/radzen"
@using IrinasBlazorSample.Data.Models;
@using IrinasBlazorSample.Data;
@using IrinasBlazorSample.Shared;
@using Microsoft.EntityFrameworkCore;
@inject DialogService dialogService
@inject DataContext dataContext;
@inject NotificationService notificationService

<h2>Radzen Components</h2>

<br />
<hr />
<h3>Modal Example</h3>
@foreach (var user in AvailableUsers)
{
    <RadzenButton ButtonStyle="ButtonStyle.Danger" Text=@($"{@user.FirstName} {@user.LastName}") Click="@(args => dialogService.Open<UserModal>($"{user.FirstName} {user.LastName}",
                        new Dictionary<string, object>() { { "User", user } },
                        new DialogOptions(){ Width = "700px", Height = "530px", Left = "calc(50% - 350px)", Top = "calc(50% - 265px)" }))">
    </RadzenButton>
}
<br />
<hr />
<h3>Notifications</h3>
<div class="row">
    <div class="col-md-6">
        <h5>Info</h5>
        <RadzenButton Text=@($"Show info notification") Style="margin-bottom: 20px; width: 200px"
                      Click="@(args => ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Info, Summary = "Info Summary", Detail = "Info Detail", Duration = 4000 }))" />
        <br />
        <h5>Warning</h5>
        <RadzenButton Text=@($"Show warning notification") Style="margin-bottom: 20px; width: 200px"
                      Click="@(args => ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Warning, Summary = "Warning Summary", Detail = "Warning Detail", Duration = 4000 }))" />
        <br />
        <h5>Error</h5>
        <RadzenButton Text=@($"Show error notification") Style="margin-bottom: 20px; width: 200px"
                      Click="@(args => ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Error Summary", Detail = "Error Detail", Duration = 4000 }))" />
        <br />
        <h5>Success</h5>
        <RadzenButton Text=@($"Show success notification") Style="margin-bottom: 20px; width: 200px"
                      Click="@(args => ShowNotification(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Success Summary", Detail = "Success Detail", Duration = 4000 }))" />
    </div>
</div>

@code {
    List<User> AvailableUsers { get; set; } = new List<User>();
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    protected override async Task OnInitializedAsync()
    {
        LoadUsers();
    }

    void LoadUsers()
    {
        if (dataContext.Users.Count() > 0)
        {
            AvailableUsers = dataContext.Users.Include(u => u.Posts).ToList();
        }
    }

    async Task ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);

        events.Add(DateTime.Now, $"{message.Severity} notification");
        await InvokeAsync(() => { StateHasChanged(); });
    }
}
