@inject IJSRuntime js

<div class="modal fade" tabindex="-1" role="dialog" id="@CssId">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                @Header
                <button type="button" class="close" data-dismiss="modal" @onclick="ToggleModal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @ChildContent
            </div>
            <div class="modal-footer">
                @Footer
            </div>
        </div>
    </div>
</div>

@code {
    private bool _show = false;
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    [Parameter]
    public RenderFragment Header { get; set; }
    [Parameter]
    public RenderFragment Footer { get; set; }
    [Parameter]
    public string CssId { get; set; } = $"Modal{Guid.NewGuid()}";
    [Parameter]
    public EventCallback<string> ModalOpened { get; set; }
    [Parameter]
    public EventCallback<string> ModalClosed { get; set; }

    public async Task ToggleModal()
    {
        _show = !_show;

        if (_show)
        {
            await js.InvokeVoidAsync("showModal", CssId);
            await ModalOpened.InvokeAsync(CssId);
        }
        else
        {
            await js.InvokeVoidAsync("hideModal", CssId);
            await ModalClosed.InvokeAsync(CssId);
        }

        await InvokeAsync(() => StateHasChanged());
    }
}

